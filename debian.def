Bootstrap: docker
From: debian:buster

%help
USAGE: salome [-h]

NOTES:
1) This image is read-only!

EXAMPLES:
List availailable apps
    $ singularity apps <image-name>

Run salome in TUI mode:
    $ singularity run salome -t scrypt.py args:....

Run salome in GUI mode:
    $ singularity run --nv salome

Run salome in GUI mode on NoVNC/Virtual :
    $ singularity run --nv vglrun salome

To add support for MeshGems:
    $ singularity run --nv -B${MESHGEMS_LICDIR}:/opt/DISTENE/Dlim salome
where MESHGEMS_LICDIR points to the directory holding a valid MeshGems license

%runscript
echo "type: singularity help <image-name>"

%setup
echo "Looking in directory '$SINGULARITY_ROOTFS' for /bin/sh"
if [ ! -x "$SINGULARITY_ROOTFS/bin/sh" ]; then
   echo "Hrmm, this container does not have /bin/sh installed..."
   exit 1
fi
# prepare for MeshGems
mkdir -p $SINGULARITY_ROOTFS/opt
mkdir -p $SINGULARITY_ROOTFS/opt/DISTENE/Dlim
# get Salome custom tarball
cp /home/LNCMI-G/trophime/Salome_Packages/SALOME-8.4.0-LNCMI-MPI-DBtesting.tgz $SINGULARITY_ROOTFS/opt/
mkdir -p /usr/local/share/salome/test
for script in $(ls /home/LNCMI-G/trophime/Salome_Tests/*py); do
  cp $script  /usr/local/share/salome/test
done
exit 0


%environment
CASROOT=/usr
LD_LIBRARY_PATH=/usr/lib/paraview:$LD_LIBRARY_PATH
PATH=/opt/SALOME-8.4.0-LNCMI-MPI-DBtesting:$PATH
export CASROOT
export LD_LIBRARY_PATH
export PATH

FEELPP_REPOSITORY=/feel
export FEELPP_REPOSITORY

%labels
AUTHOR christophe.trophime@lncmi.cnrs.fr
Maintainer: Christophe Trophime
Maintainer_email: christophe.trophime@lncmi.cnrs.fr
Version 1.0

%post
echo "Post install"
# sed -i 's/.*PS1 *=.*//g' /etc/bash.bashrc
# sed -i 's/.*PS1 *=.*//g' /.singularity.d/actions/shell
# sed -i 's/.*PS1 *=.*//g' /.singularity.d/env/99-base.sh
# sed -i 's/.*HOME *=.*//g' /.singularity.d/env/10-docker.sh

echo "alias ls='ls --color=auto'" >> /etc/bash.bashrc
echo "alias ll='ls -ls'" >> /etc/bash.bashrc
echo "alias cp='cp -i'" >> /etc/bash.bashrc
echo "alias mv='mv -i'" >> /etc/bash.bashrc
echo "alias rm='rm -i'" >> /etc/bash.bashrc
echo "alias grep='grep --color'" >> /etc/bash.bashrc

echo "# Add support for openmp" >> /etc/bash.bashrc
echo "export OMP_NUM_THREADS=1" >> /etc/bash.bashrc
echo "export OPENBLAS_NUM_THREADS=1 #OMP_NUM_THREADS=1,1" >> /etc/bash.bashrc

export LANG=C
mkdir -p /feel
mkdir -p /scratch /tmp

# Add Debian/Ubuntu Lncmi repository (should check if depot is accessible)
apt-get update
apt-get -y install gnupg2  
gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv 535D3508
gpg --export --armor 535D3508 | apt-key add -
echo "deb http://euler/~trophime/debian/ buster main" >  /etc/apt/sources.list.d/lncmi.list

apt-get update
apt-get -y upgrade
apt-get -y install emacs vim nano \
   bash-completion wget curl \
   openssh-client net-tools

apt-get install -y \
   firefox-esr \
   libcos4-1 \
   omniidl omniidl-python omniorb-idl omniorb-nameserver python-omniorb python-omniorb-omg \
   paraview-python \
   netgen libnglib-5.3.1 \
   gmsh-tetgen libpastix-dev \
   libopencascade-foundation-7.2.0 libopencascade-ocaf-7.2.0 libopencascade-visualization-7.2.0 libopencascade-ocaf-7.2.0 libopencascade-ocaf-lite-7.2.0  \
   libqt5xml5 libqt5test5 libqt5sensors5 libqt5positioning5 libqt5multimediawidgets5 libqt5webengine5 libqt5webenginewidgets5 \
   libqwt-qt5-6 \
   python-sip python-pyqt5 \
   libboost-filesystem1.62.0 libboost-regex1.62.0 libboost-signals1.62.0 libboost-thread1.62.0 libboost-date-time1.62.0 libboost-chrono1.62.0 libboost-atomic1.62.0 \
   graphviz \
   valgrind \
   python-psutil  \
   yamllint python-yaml

# Installing VirtualGl for noVNC
apt-get -y install mesa-utils mesa-utils-extra x11-apps libxv1
wget https://sourceforge.net/projects/virtualgl/files/2.5.2/virtualgl_2.5.2_amd64.deb/download -O /tmp/virtualgl_2.5.2_amd64.deb
dpkg -i /tmp/virtualgl_2.5.2_amd64.deb
rm -f /tmp/virtualgl_2.5.2_amd64.deb

# Cleanup
apt -y clean

# Installing Salome
cd /opt && tar zxf /opt/SALOME-8.4.0-LNCMI-MPI-DBtesting.tgz
rm /opt/SALOME-8.4.0-LNCMI-MPI-DBtesting.tgz

%test
for script in $(ls /usr/local/share/salome/test/*py); do
  echo -n "Running $script"
  status=salome -t $script > /dev/null
  if [ "x$status" = "0" ]; then
     echo "\t FAILED"
  else
     echo "\t PASS"
  fi   
done

%apprun
salome